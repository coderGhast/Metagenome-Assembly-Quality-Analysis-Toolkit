\addvspace {10\p@ }
\contentsline {figure}{\numberline {1.1}{\ignorespaces A very small example of a number of reads being taken into an assembler and the output of a contig where there may be a chimera.\relax }}{2}{figure.caption.3}
\contentsline {figure}{\numberline {1.2}{\ignorespaces A small example of the contents of a FASTA file, with very short contigs. The example is just to show the format of how multiple contiguous reads are stored in the same FASTA file.\relax }}{7}{figure.caption.4}
\contentsline {figure}{\numberline {1.3}{\ignorespaces A use case diagram demonstrating the expected functionality for a user based on the functional requirements laid out in this section.\relax }}{8}{figure.caption.5}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces Adding an object to the Model via the Controller to be accessed in the View. The View here is `list', which is a Thymeleaf template that will dynamically build the page using the data from the Model added here.\relax }}{13}{figure.caption.6}
\contentsline {figure}{\numberline {2.2}{\ignorespaces Including a thymeleaf fragment in a page. You can see how the call is made from one `th:replace' with the name of the html fragment file and then the fragment to be included from that file, in this case `inspectbox'.\relax }}{13}{figure.caption.7}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Including a thymeleaf fragment in a page. This is the declaration of the fragment being included in the previous figure, declared as such through `th:fragment'.\relax }}{14}{figure.caption.8}
\contentsline {figure}{\numberline {2.4}{\ignorespaces The MVC framework the application is designed upon. The data flows between the Model and the View via the Controller, based on the user requests and interaction.\relax }}{14}{figure.caption.9}
\contentsline {figure}{\numberline {2.5}{\ignorespaces Class diagram for the `Welcome Page', and what classes are used upon a Request for the page.\relax }}{15}{figure.caption.10}
\contentsline {figure}{\numberline {2.6}{\ignorespaces Class diagram for the `List Page', and what classes are used upon a Request for the page.\relax }}{16}{figure.caption.11}
\contentsline {figure}{\numberline {2.7}{\ignorespaces Class diagram for the `Results Page', and what classes are used upon a Request for the page.\relax }}{17}{figure.caption.12}
\contentsline {figure}{\numberline {2.8}{\ignorespaces The layout of the directory structure for the application.\relax }}{20}{figure.caption.13}
\contentsline {figure}{\numberline {2.9}{\ignorespaces The `welcome' page that greets the user upon requesting the home page of the web service.\relax }}{21}{figure.caption.14}
\contentsline {figure}{\numberline {2.10}{\ignorespaces The `list' page that is displayed after a user submits their (valid) assembly data in FASTA format.\relax }}{22}{figure.caption.15}
\contentsline {figure}{\numberline {2.11}{\ignorespaces When a user clicks to inspect a contiguous read, this menu appears giving them options to alter the parameters of the quality assessment inspection.\relax }}{23}{figure.caption.16}
\contentsline {figure}{\numberline {2.12}{\ignorespaces If the user clicks to see an explanation of the process, they can click the text that says to `Show explanation', and this text appears.\relax }}{23}{figure.caption.17}
\contentsline {figure}{\numberline {2.13}{\ignorespaces The GC result tab shown to the user on inspection of a contig. The browser has been zoomed out in order to display the page in full.\relax }}{25}{figure.caption.18}
\contentsline {figure}{\numberline {2.14}{\ignorespaces The Open Reading Frame results view tab.\relax }}{26}{figure.caption.19}
\contentsline {figure}{\numberline {2.15}{\ignorespaces The Open Reading Frame results view tab, displaying that when a user clicks on a different ORF Location, the highlight on the frame chart and list changes to reflect this.\relax }}{27}{figure.caption.20}
\contentsline {figure}{\numberline {2.16}{\ignorespaces The `Superframe', a comparison between the ORF Locations within the contig and the GC content windows that are above the threshold..\relax }}{27}{figure.caption.21}
\contentsline {figure}{\numberline {2.17}{\ignorespaces The result of when a user clicks to view a window data, they can see the particular percentage of the GC content of that window, and where that window starts and finishes, if they wished to inspect the contig themselves using those numbers.\relax }}{28}{figure.caption.22}
\contentsline {figure}{\numberline {2.18}{\ignorespaces If an error occurs as the user is browsing the web service, i.e. they try to access a page when they do not have the required data submitted, they are presented with this page informing them of an issue.\relax }}{29}{figure.caption.23}
\contentsline {figure}{\numberline {2.19}{\ignorespaces The Jet Brains IntelliJ Integrated Developement Environment (IDE) I used for developing my application.\relax }}{30}{figure.caption.24}
\contentsline {figure}{\numberline {2.20}{\ignorespaces A countdown of the pomodoro tomato timer on \url {http://www.tomato.es/}, used for breaking up development time and keeping track of work done over time.\relax }}{30}{figure.caption.25}
\contentsline {figure}{\numberline {2.21}{\ignorespaces A few of the commits made to my major project repository.\relax }}{31}{figure.caption.26}
\contentsline {figure}{\numberline {2.22}{\ignorespaces Examples of the continuous integration on CodeShip running my tests every time I committed to my repository.\relax }}{31}{figure.caption.27}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces Part of the code for reading in a users data when they have pasted it into the text area of the web service. Deals with creating new ContiguousRead objects and adding them to a ContigResult every time it finds a new header for a contig (or reaches the end of the input).\relax }}{33}{figure.caption.28}
\contentsline {figure}{\numberline {3.2}{\ignorespaces The code for splitting a contiguous read into windows available for calculating the GC content window percentages.\relax }}{34}{figure.caption.29}
\contentsline {figure}{\numberline {3.3}{\ignorespaces The code for calculating the GC content percentages for each window passed into the method.\relax }}{34}{figure.caption.30}
\contentsline {figure}{\numberline {3.4}{\ignorespaces Extracting the data from the Model, provided by the Controller to the View, using Thymeleaf's inline tag to be able to use CDATA to convert the Thymeleaf extracts into JavaScript.\relax }}{35}{figure.caption.31}
\contentsline {figure}{\numberline {3.5}{\ignorespaces `GcContentViewData', the object provided to the View in order to display the GC content data to the user.\relax }}{36}{figure.caption.32}
\contentsline {figure}{\numberline {3.6}{\ignorespaces Finding all of the start and stop Codons from within the passed frame from the contig.\relax }}{37}{figure.caption.33}
\contentsline {figure}{\numberline {3.7}{\ignorespaces Extracting each frame and calling to run the ORF Finding process.\relax }}{37}{figure.caption.34}
\contentsline {figure}{\numberline {3.8}{\ignorespaces Getting the base pair characters of a reverse frame is as simple as a switch statement and building the reversed contig from back to front.\relax }}{38}{figure.caption.35}
\contentsline {figure}{\numberline {3.9}{\ignorespaces `Zipping' together ORF Locations from start and stop Codons within the frame.\relax }}{39}{figure.caption.36}
\contentsline {figure}{\numberline {3.10}{\ignorespaces Finding if a click if within an ORF Location is as simple as going through the list of ORF Locations, only checking against those within the same frame as the click, then looking at whether the click is within the start and stop points of an ORF Location within the canvas, based on the size and location of where it was painted (for reverse frames, the start and stop points are swapped, as reverse frames are displayed in the same direction as forward frames, with the indexes in the right order for a reverse frame).\relax }}{40}{figure.caption.37}
\contentsline {figure}{\numberline {3.11}{\ignorespaces Formatting the characters from within an ORF Location into HTML tags to display the data in the way I wanted it to be designed, then inserting it into the div for displaying ORF Location information within the page.\relax }}{41}{figure.caption.38}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces An example of a unit test used in my application.\relax }}{44}{figure.caption.39}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Results of running the set of unit tests developed for the application.\relax }}{45}{figure.caption.40}
\contentsline {figure}{\numberline {4.3}{\ignorespaces The test coverage of my unit tests over the developed application code.\relax }}{45}{figure.caption.41}
\contentsline {figure}{\numberline {4.4}{\ignorespaces The test coverage of my unit tests over the developed application code, broken down for each class.\relax }}{46}{figure.caption.42}
\contentsline {figure}{\numberline {4.5}{\ignorespaces The same page and results from the application shown in different modern browsers.\relax }}{46}{figure.caption.43}
\contentsline {figure}{\numberline {4.6}{\ignorespaces YSlow report after running on the Welcome page.\relax }}{47}{figure.caption.44}
\contentsline {figure}{\numberline {4.7}{\ignorespaces YSlow report after running on the List page.\relax }}{47}{figure.caption.45}
\contentsline {figure}{\numberline {4.8}{\ignorespaces YSlow report after running on the Results page.\relax }}{47}{figure.caption.46}
\contentsline {figure}{\numberline {4.9}{\ignorespaces Combining two species contiguous reads together at 50\% of each of the file (first half one species, second half another species), we see a very obvious split in the GC chart.\relax }}{48}{figure.caption.47}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
