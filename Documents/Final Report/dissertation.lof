\addvspace {10\p@ }
\contentsline {figure}{\numberline {1.1}{\ignorespaces A very small example of a number of reads being taken into an assembler and the output of a contig where there may be a chimera.\relax }}{2}{figure.caption.4}
\contentsline {figure}{\numberline {1.2}{\ignorespaces A use case diagram demonstrating the expected functionality for a user based on the functional requirements.\relax }}{7}{figure.caption.5}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces Adding an object to the Model via the Controller to be accessed in the View. The View here is `list', which is a Thymeleaf template that will dynamically build the page using the data from the Model added here.\relax }}{12}{figure.caption.6}
\contentsline {figure}{\numberline {2.2}{\ignorespaces Including a thymeleaf fragment in a page. You can see how the call is made from one `th:replace' with the name of the html fragment file and then the fragment to be included from that file, in this case `inspectbox'.\relax }}{12}{figure.caption.7}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Including a thymeleaf fragment in a page. This is the declaration of the fragment being included in the previous figure, declared as such through `th:fragment'.\relax }}{13}{figure.caption.8}
\contentsline {figure}{\numberline {2.4}{\ignorespaces The MVC framework the application is designed upon. The data flows between the Model and the View via the Controller, based on the user requests and interaction.\relax }}{13}{figure.caption.9}
\contentsline {figure}{\numberline {2.5}{\ignorespaces Class diagram for the `Welcome Page', and what classes are used upon a Request for the page.\relax }}{14}{figure.caption.10}
\contentsline {figure}{\numberline {2.6}{\ignorespaces Class diagram for the `List Page', and what classes are used upon a Request for the page.\relax }}{15}{figure.caption.11}
\contentsline {figure}{\numberline {2.7}{\ignorespaces Class diagram for the `Results Page', and what classes are used upon a Request for the page.\relax }}{16}{figure.caption.12}
\contentsline {figure}{\numberline {2.8}{\ignorespaces The layout of the directory structure for the application.\relax }}{19}{figure.caption.13}
\contentsline {figure}{\numberline {2.9}{\ignorespaces The `welcome' page that greets the user upon requesting the home page of the web service.\relax }}{20}{figure.caption.14}
\contentsline {figure}{\numberline {2.10}{\ignorespaces The `list' page that is displayed after a user submits their (valid) assembly data in FASTA format.\relax }}{21}{figure.caption.15}
\contentsline {figure}{\numberline {2.11}{\ignorespaces When a user clicks to inspect a contiguous read, this menu appears giving them options to alter the parameters of the quality assessment inspection.\relax }}{22}{figure.caption.16}
\contentsline {figure}{\numberline {2.12}{\ignorespaces If the user clicks to see an explanation of the process, they can click the text that says to `Show explanation', and this text appears.\relax }}{22}{figure.caption.17}
\contentsline {figure}{\numberline {2.13}{\ignorespaces The GC result tab shown to the user on inspection of a contig. The browser has been zoomed out in order to display the page in full.\relax }}{24}{figure.caption.18}
\contentsline {figure}{\numberline {2.14}{\ignorespaces The Open Reading Frame results view tab.\relax }}{25}{figure.caption.19}
\contentsline {figure}{\numberline {2.15}{\ignorespaces The Open Reading Frame results view tab, displaying that when a user clicks on a different ORF Location, the highlight on the frame chart and list changes to reflect this.\relax }}{26}{figure.caption.20}
\contentsline {figure}{\numberline {2.16}{\ignorespaces The `Superframe', a comparison between the ORF Locations within the contig and the GC content windows that are above the threshold..\relax }}{26}{figure.caption.21}
\contentsline {figure}{\numberline {2.17}{\ignorespaces The result of when a user clicks to view a window data, they can see the particular percentage of the GC content of that window, and where that window starts and finishes, if they wished to inspect the contig themselves using those numbers.\relax }}{27}{figure.caption.22}
\contentsline {figure}{\numberline {2.18}{\ignorespaces If an error occurs as the user is browsing the web service, i.e. they try to access a page when they do not have the required data submitted, they are presented with this page informing them of an issue.\relax }}{28}{figure.caption.23}
\contentsline {figure}{\numberline {2.19}{\ignorespaces The Jet Brains IntelliJ Integrated Developement Environment (IDE) I used for developing my application.\relax }}{29}{figure.caption.24}
\contentsline {figure}{\numberline {2.20}{\ignorespaces A countdown of the pomodoro tomato timer on \url {http://www.tomato.es/}, used for breaking up development time and keeping track of work done over time.\relax }}{29}{figure.caption.25}
\contentsline {figure}{\numberline {2.21}{\ignorespaces A few of the commits made to my major project repository.\relax }}{30}{figure.caption.26}
\contentsline {figure}{\numberline {2.22}{\ignorespaces Examples of the continuous integration on CodeShip running my tests every time I committed to my repository.\relax }}{30}{figure.caption.27}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces Part of the code for reading in a users data when they have pasted it into the text area of the web service. Deals with creating new ContiguousRead objects and adding them to a ContigResult every time it finds a new header for a contig (or reaches the end of the input).\relax }}{32}{figure.caption.28}
\contentsline {figure}{\numberline {3.2}{\ignorespaces The code for splitting a contiguous read into windows available for calculating the GC content window percentages.\relax }}{33}{figure.caption.29}
\contentsline {figure}{\numberline {3.3}{\ignorespaces The code for calculating the GC content percentages for each window passed into the method.\relax }}{33}{figure.caption.30}
\contentsline {figure}{\numberline {3.4}{\ignorespaces Extracting the data from the Model, provided by the Controller to the View, using Thymeleaf's inline tag to be able to use CDATA to convert the Thymeleaf extracts into JavaScript.\relax }}{34}{figure.caption.31}
\contentsline {figure}{\numberline {3.5}{\ignorespaces `GcContentViewData', the object provided to the View in order to display the GC content data to the user.\relax }}{35}{figure.caption.32}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
